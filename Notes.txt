* Used twitter4j
* Used twitter-text
** Did not need to write edge-case tests
* Targeted 1000 tweets/s for all low-level ops
** Many of these can be much faster if I simply convert some defs to vals

* Commented out tests
* UTF8
* Use of slow metrics to overcome overhead and false indicators
* Only look for unified emoji codes

* Don't like that TweetInfoExtractors have a string name
* Mention why I have empty tests
* Question about duplicated emoji, urls and hashtags in a tweet
* Used no-op listener to check rate

Blocking tps: 730 (was 2000 before I made the status return text)
Non-blocking tps: 600 (was 1600 before I made the status return text)


140/322/41 nblock/nblock2/block with parallelization of stats and extractors

142/312/41 nblock/nblock2/block on slow stats with no parallelization of stats for nblock2

149/142/41 nblock/nblock2/block on slow stats with no parallelization of stats for nblock2 or extractors for anyone